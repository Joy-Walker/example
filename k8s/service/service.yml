apiVersion: v1
kind: Service
metadata:
  name: test-service
spec:
  selector:
    app: ngx-deploy # 这里其实匹配的是pod的标签而不是deploy的标签
  ports:
    - port: 8080 # service的端口
      targetPort: 80 # 容器的端口
#      nodePort: 30000 # 节点端口
      protocol: TCP
#  clusterIP: None
  type: ClusterIP
#  externalTrafficPolicy: Local

# pod的ip不是固定的，另外多个pod总有负载均衡的需求，通过iptables实现
# 会造成宿主机有大量的iptables规则，耗费cpu性能，另外kube-proxy还需要监听
# pod事件，动态更新endpoint，所以kube-proxy的启动参数--proxy-mode=iptables

# IPVS的模式 当创建service之后，会在宿主机上创建一个虚拟网卡，kube-ipvs并且它的ip
# 地址为service的vip地址，然后kube-proxy为这个ip地址设置虚拟主机，虚拟主机的地址就是代理的pod的地址

#  service 与dns的关系
#  Service和Pod都会被分配对应的DNS A记录
#  对于普通的service，访问分配的域名会得到service的vip地址
#  对于headless service，访问分配的域名会得到pod的ip地址

#  externalTrafficPolicy: Local
# 设置为local，请求转发到node上后，如果node上没有相应的pod，则流量会被丢弃
# 设置为cluster（默认），请求转发到node节点后，如果节点上没有相应的pod，则请求会转发到其他节点
# 这样的话，源ip可能就不是客户端的ip了 而是转发的node的ip